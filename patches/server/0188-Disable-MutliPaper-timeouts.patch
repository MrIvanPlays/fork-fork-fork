From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Sat, 22 Oct 2022 17:36:59 +0200
Subject: [PATCH] Disable MutliPaper timeouts.


diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index ca81c3b396a303fda8eef8b8c1ea106ffecfc807..b2aca44b52c020d71e885bc4a2c76aa228592589 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -51,7 +51,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
         int cx = pos.x;
         int cz = pos.z;
         CompletableFuture<Optional<CompoundTag>> future = MultiPaper.readRegionFileAsync(world, path, cx, cz)
-                .orTimeout(20, TimeUnit.SECONDS)
+                .orTimeout(2000000000, TimeUnit.SECONDS)
                 .thenApplyAsync(in -> {
                     try {
                         return in == null ? Optional.empty() : Optional.of(NbtIo.read(in));
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index df163434fc5245d893d23ac375bc5f27d1315d4f..dc39b04e51c7445e307a07212f71acf250344825 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -358,7 +358,7 @@ public class MultiPaper {
 
     public static DataInput readRegionFile(String world, String path, int cx, int cz) {
         try {
-            return readRegionFileAsync(world, path, cx, cz).get(20, TimeUnit.SECONDS);
+            return readRegionFileAsync(world, path, cx, cz).get(2000000000, TimeUnit.SECONDS); // Xymb: Disable timeouts, they cause instability
         } catch (TimeoutException timeoutException) {
             LOGGER.warn("Timed out reading " + world + "," + path + "," + cx + "," + cz + ", retrying...");
             return readRegionFile(world, path, cx, cz);
diff --git a/src/main/java/puregero/multipaper/MultiPaperIO.java b/src/main/java/puregero/multipaper/MultiPaperIO.java
index b36b30f561f837105339109fa61552a8bdabd42b..8f64f1b378c2e0038e21022fa3ec8a46a6ec3525 100644
--- a/src/main/java/puregero/multipaper/MultiPaperIO.java
+++ b/src/main/java/puregero/multipaper/MultiPaperIO.java
@@ -107,7 +107,7 @@ public class MultiPaperIO extends Thread implements IOHandler {
                     return PaperFileIOThread.FAILURE_VALUE;
                 });
 
-        future.thenApply(nbt -> false).completeOnTimeout(true, 15, TimeUnit.SECONDS).thenAccept(timedout -> {
+        future.thenApply(nbt -> false).completeOnTimeout(true, 2000000000, TimeUnit.SECONDS).thenAccept(timedout -> {
             if (timedout) {
                 LOGGER.warn("Timed out reading " + key.getWorld() + "," + path + "," + key.getX() + "," + key.getZ() + ", retrying...");
                 readChunk(key, path).thenAccept(future::complete);
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java
index 0bf0efa705158b1df1b073cf23669fb018ded4b9..2cc9878e44d960a6e55fbb8baa6b2025f15eb122 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java
@@ -135,7 +135,7 @@ public class RequestChunkPacket extends ExternalServerPacket {
             }
         })
         // Timeout instantly if this server is blocking our chunk loading, as this is probably also blocking their chunk loading
-        .orTimeout(15, TimeUnit.SECONDS).exceptionally(throwable -> {
+        .orTimeout(2000000000, TimeUnit.SECONDS).exceptionally(throwable -> {
             if (throwable instanceof TimeoutException) {
                 LOGGER.warn("Timed out while sending chunk " + world + "," + cx + "," + cz);
             } else {
