From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Wed, 30 Nov 2022 20:26:58 +0100
Subject: [PATCH] NBT deduplication WIP.


diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index 912fd5135e89348bdd3c0a8b6c07860ebc106df3..ad92c53e2aa44941c5d943faa05a6e4f6fe90d8a 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -46,6 +46,7 @@ public class CompoundTag implements Tag {
                     }
                 }
 
+                map.trim();
                 return new CompoundTag(map);
             }
         }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 4ce04de910698f993b2e0907869273de448725e6..df47f9a5a77db937506698a41111cbed33797580 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2054,7 +2054,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             }
         }
 
-        System.out.println("TIME " + String.valueOf(handleUseItemOn_totalTime));
+//        System.out.println("TIME " + String.valueOf(handleUseItemOn_totalTime));
         handleUseItemOn_totalTime += System.nanoTime() - start;
     }
 
diff --git a/src/main/java/net/minecraft/world/ContainerHelper.java b/src/main/java/net/minecraft/world/ContainerHelper.java
index e8edaf7e8ac82b2c5a78bcad65c9523da331bb33..050b82225a20d843661ee963f7ab9d92d1277a1d 100644
--- a/src/main/java/net/minecraft/world/ContainerHelper.java
+++ b/src/main/java/net/minecraft/world/ContainerHelper.java
@@ -58,7 +58,11 @@ public class ContainerHelper {
             for(int i = 0; i < listTag.size(); ++i) {
                 DeduplicatedNBTTag deduplicatedTag = (DeduplicatedNBTTag)listTag.get(i);
                 CompoundTag compoundTag = deduplicatedTag.tag;
-                int j = compoundTag.getByte("Slot") & 255;
+//                compoundTag.remove("Slot");
+//                compoundTag.remove("Count");
+                compoundTag.putByte("Count", (byte)deduplicatedTag.count);
+//                int j = compoundTag.getByte("Slot") & 255;
+                int j = deduplicatedTag.slot;
                 if (j >= 0 && j < stacks.size()) {
                     stacks.set(j, ItemStack.ofRapidUnsafe(compoundTag));
                 }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 8f4b029b67d3c33f5ae64f1974772496b2a21f21..8d52f7f99dc3fd5b6c61149cca60f25b4bf1d6c4 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -319,6 +319,15 @@ public final class ItemStack {
             return ItemStack.EMPTY;
         }
     }
+
+    public static ItemStack ofRapidUnsafe(CompoundTag nbt, int count, CompoundTag tag) {
+        try {
+            return new ItemStack(nbt, true);
+        } catch (RuntimeException runtimeexception) {
+            ItemStack.LOGGER.debug("Tried to load invalid item: {}", nbt, runtimeexception);
+            return ItemStack.EMPTY;
+        }
+    }
     // MultiPaper end
 
     public boolean isEmpty() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index f750c2356440c6efda2fbe56372d28f1b8ae8dab..bbb58b2755724a095e3476f75b3eff34f5755cc2 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -822,7 +822,7 @@ public class ChunkSerializer {
             chunk.entitiesToLoad = null;
             chunk.blockEntitiesToLoad = null;
             // MultiPaper end
-            System.out.println((System.nanoTime() - start) / 1000000.);
+//            System.out.println((System.nanoTime() - start) / 1000000.);
         };
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 85164f8112973ea7bd1aec6fc2b1d7b7d99321fe..2b18799187249a2c6cce85c3085316d277133581 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -321,6 +321,7 @@ public class MultiPaper {
     }
 
     public static void writeChunk(ChunkPos chunkPos, ServerLevel serverLevel, CompoundTag compoundTag) throws IOException {
+        xymb.NBTDeduplicator.deduplicateContainersOnWrite(compoundTag);
         writeRegionFileNBT(serverLevel, "region", chunkPos, compoundTag);
     }
 
@@ -435,7 +436,6 @@ public class MultiPaper {
     }
 
     public static void writeRegionFileNBT(String world, String path, int cx, int cz, CompoundTag compoundTag) throws IOException {
-        xymb.NBTDeduplicator.deduplicateContainersOnWrite(compoundTag);
         writeRegionFile(world, path, cx, cz, nbtToBytes(compoundTag));
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaperIO.java b/src/main/java/puregero/multipaper/MultiPaperIO.java
index f6234c82549db6c4cde27251d2c5a712d888edf3..4ed3cdc068ae99c39f1e635f1baa772a1b9afbff 100644
--- a/src/main/java/puregero/multipaper/MultiPaperIO.java
+++ b/src/main/java/puregero/multipaper/MultiPaperIO.java
@@ -113,9 +113,9 @@ public class MultiPaperIO extends Thread implements IOHandler {
                     return PaperFileIOThread.FAILURE_VALUE;
                 });
 
-        future.thenApply(nbt -> false).completeOnTimeout(true, 15, TimeUnit.SECONDS).thenAccept(timedout -> {
+        future.thenApply(nbt -> false).completeOnTimeout(true, 60, TimeUnit.SECONDS).thenAccept(timedout -> {
             if (timedout) {
-//                LOGGER.warn("Timed out reading " + key.getWorld() + "," + path + "," + key.getX() + "," + key.getZ() + ", retrying...");
+                LOGGER.warn("Timed out reading " + key.getWorld() + "," + path + "," + key.getX() + "," + key.getZ() + ", retrying...");
                 readChunk(key, path).thenAccept(future::complete);
             }
         });
diff --git a/src/main/java/xymb/DeduplicatedNBTTag.java b/src/main/java/xymb/DeduplicatedNBTTag.java
index 8654779f1f478c89ab155b6f7c0b2b8248f83e5c..11f01c1e4e9c76065cfdbb9f1137e544f1eb1ba7 100644
--- a/src/main/java/xymb/DeduplicatedNBTTag.java
+++ b/src/main/java/xymb/DeduplicatedNBTTag.java
@@ -11,9 +11,12 @@ import java.io.IOException;
 
 public class DeduplicatedNBTTag implements Tag {
     public CompoundTag tag;
+    public int slot, count;
 
-    public DeduplicatedNBTTag(CompoundTag tag) {
+    public DeduplicatedNBTTag(CompoundTag tag, int slot, int count) {
         this.tag = tag;
+        this.slot = slot;
+        this.count = count;
     }
 
     public void write(DataOutput output) throws IOException {
diff --git a/src/main/java/xymb/NBTDeduplicator.java b/src/main/java/xymb/NBTDeduplicator.java
index c2d2ca22ad0baa1b1bfb37c5e87864d79253ac76..14b916aa4eb5d6efa68734dd399e45b182ff6afb 100644
--- a/src/main/java/xymb/NBTDeduplicator.java
+++ b/src/main/java/xymb/NBTDeduplicator.java
@@ -117,24 +117,34 @@ public class NBTDeduplicator {
                 ListTag items = blockEntityNbt.getList("Items", 10);
                 ListTag newItems = new ListTag();
 
-                ListTag listTagDeduplicated = new ListTag();
+//                ListTag listTagDeduplicated = new ListTag();
 
                 for(int i = 0; i < items.size(); ++i) {
                     CompoundTag compoundTag = items.getCompound(i);
 
-                    Pair pair = deduplicator.addAndGetHashTag(compoundTag);
-                    listTagDeduplicated.add(i, pair.first);
-                    newItems.add(i, new DeduplicatedNBTTag(pair.second));
+                    int slot = compoundTag.getByte("Slot") & 255;
+                    int count = compoundTag.getByte("Count");
+                    compoundTag.remove("Slot");
+                    compoundTag.remove("Count");
+                    compoundTag = deduplicator.addAndDedupe(compoundTag);
+
+                    newItems.add(i, new DeduplicatedNBTTag(compoundTag, slot, count));
                 }
 //                blockEntityNbt.put("ItemsDedup", listTagDeduplicated);
                 blockEntityNbt.remove("Items");
                 blockEntityNbt.put("NewItems", newItems);
             }
         }
-        nbt.put("ItemsDedupPalette", deduplicator.makePalette());
+//        nbt.put("ItemsDedupPalette", deduplicator.makePalette());
     }
 
     public static void deduplicateContainersOnWrite(CompoundTag nbt) {
+        ListTag nbttaglist3 = nbt.getList("block_entities", 10);
+        for (int k1 = 0; k1 < nbttaglist3.size(); ++k1) {
+            CompoundTag blockEntityNbt = nbttaglist3.getCompound(k1);
+            if (blockEntityNbt.contains("Items")) {
+            }
+        }
 
     }
 }
